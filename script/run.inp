clear
set verbose off
#set datacols 6

# Parameters
string DIR_WORK = "/home/at/git/football_results"
string URL = "https://raw.githubusercontent.com/martj42/international_results/master/results.csv"
scalar LOAD_DATA_FROM_WEB = FALSE

# Set the working directory
set workdir "@DIR_WORK"

/* Create some folder (works only on LINUX!)
 ON WINDOWS & MacOS: PLEASE CREATE TWO FOLDERS:
 1) "data"
 2) "output"
*/
if $sysinfo.os == "linux"
    shell mkdir -p data output
endif

# Install necessary package(s) automatically if needed
pkg query calendar_utils --quiet
if nelem($result) <= 1
    pkg install calendar_utils
endif
pkg query multiplot --quiet
if nelem($result) <= 1
    pkg install multiplot
endif

include calendar_utils.gfn
include multiplot.gfn


if LOAD_DATA_FROM_WEB == TRUE
    # Load the data from the web
    open "@URL" --quiet --preserve --all-cols

    # Store the data locally (just to have it...)
    store "./data/data_raw.csv"
else
    open "./data/data_raw.csv" --preserve  --all-cols
endif



# Create some calendar series
series date_iso = dates_to_iso8601(date, "%Y-%m-%d")
print date date_iso -o --range=1:5
series year, month, day
isoconv(date_iso, &year, &month, &day)
print date date_iso year month day -o --range=1:5

# Plot
## Count the number of entries (and hence games) per year
matrix gpy = aggregate(year, year)
gpy = mreverse(gpy, TRUE)
print gpy --range=1:10

plot gpy
        options fit=none
        literal set xlabel "Year"
        literal set ylabel "Number of games"
end plot --output="./output/games_per_year.png"


# Plot with factors
series friendly = (tournament == "Friendly")
print tournament friendly -o --range=1:5

list by = year friendly
matrix gpyf = aggregate(year, by)
print gpyf --range=1:5

# For plotting, re-arrange the column order:
gpyf = gpyf[,{3, 1, 2}]

plot gpyf
       options fit=none dummy
       literal set xlabel "Year"
       literal set ylabel "Number of games"
end plot --output="./output/games_per_year_factorized.png"



# Plot number of unique tournaments per year
function scalar unique_entries (const series y)
    /* Aggregation function: Compute the number of unique entries of 'y'
    return: int, number of unique entries. */
    return rows(values(y))
end function

# TODO: If the aggregate function is applied to a restricted dataset,
# I get the msg. "restore_full_sample: dset is not peerset!" ?
#smpl full
smpl tournament != "Friendly" --restrict --replace
matrix tpy = aggregate(tournament, year, unique_entries)
tpy = mreverse(tpy, TRUE)
tpy = tpy[,{1, 3}]
print tpy --range=1:10

plot tpy
       options fit=loess dummy
       literal set xlabel "Year"
       literal set ylabel "Number of tournament"
end plot --output="./output/number_of_tournament_per_year.png"


/*
# Plot the average number of teams per competition (not easy to realize)
smpl tournament != "Friendly" --restrict --replace
list Teams = home_team away_team
list by = year tournament
matrix tpypt = aggregate(Teams, by)

plot tpypt
       options fit=loess dummy
       literal set xlabel "Year"
       literal set ylabel "Average number of teams per tournament"
end plot --output="./output/avg_number_of_teams_per_tournament_per_year.png"
*/


# Plot goals per game
smpl full
series goals = home_score + away_score
smpl tournament == "FIFA World Cup" --restrict

matrix gpg = aggregate(goals, year, mean)
gpg = gpg[,{3, 1}]
print gpg -o --range=1:10
plot gpg
       options fit=loess dummy
       literal set xlabel "Year"
       literal set ylabel "Average goals per game"
end plot --output="./output/avg_goals_per_game.png"


# Percentages of winning, loosing and tie
smpl full
series win = (home_score > away_score) ? 1 : 0
series lose = (home_score < away_score) ? 2 : 0
series tie = (win == 0 && lose == 0) ? 3 : 0

strings score_labels = defarray("win", "lose", "tie")
series home_result = win + lose + tie
stringify(home_result, score_labels)

smpl home_result home_score away_score --no-missing
print home_result home_score away_score -o --range=1:5

matrix m = aggregate(home_result, home_result)
print m
m[,2] = m[,2]./ $nobs       # compute relative frequencies
rnameset(m, score_labels)

print m


